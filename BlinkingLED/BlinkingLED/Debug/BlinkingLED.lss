
BlinkingLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077b  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d5  00000000  00000000  0000090b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026c  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000124c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d7  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001647  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000168f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:
 #include <util/delay.h>


 int main(void)
 {
	 DDRC  = 0b11111111;		//port C as output
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	87 b9       	out	0x07, r24	; 7
	 PORTC = 0b11111110;		//LED 0 is ON
  8c:	8e ef       	ldi	r24, 0xFE	; 254
  8e:	88 b9       	out	0x08, r24	; 8
	 while (1)
	 {
		_delay_ms(100);		//delay 100ms
		PORTC = PORTC^0b00000001;	//negate 0, XOR PORTC, blinking the led 0
  90:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f e7       	ldi	r18, 0x7F	; 127
  94:	3a e1       	ldi	r19, 0x1A	; 26
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	30 40       	sbci	r19, 0x00	; 0
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x10>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x1a>
  a2:	00 00       	nop
  a4:	88 b1       	in	r24, 0x08	; 8
  a6:	89 27       	eor	r24, r25
  a8:	88 b9       	out	0x08, r24	; 8
  aa:	f3 cf       	rjmp	.-26     	; 0x92 <main+0xa>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
